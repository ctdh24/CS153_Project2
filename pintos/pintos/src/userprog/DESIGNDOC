		     +--------------------------+
       	       	     |		CS 153		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Calvin Huynn <chuyn006@ucr.edu> <861015448>
Jeffrey Chen <jchen086@ucr.edu> <861021330>
Derrick Lam <dlam012@ucr.edu> <861005721>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

thread.c
	// $File list associated with each thread
	struct list file_list;
	int fd;

	// $Child list for each thread
	struct list child_list;
	// $Every thread's thread ID
	tid_t parent;
	// $Child list pointer so we can get to it
	struct child_process* child;

process.c
	// $Pass in file_name and strtok_r iterator for it so we can parse arguments
	static bool
	setup_stack (void **esp, const char* file_name, char** save_ptr)

	// $Add file to process file_list
	int process_add_file(struct file*);
	// $Return the requested file in the current thread
	struct file* process_get_file(int);
	// $Close the requested  file in the current thread
	void process_close_file(int);

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Place all command line arguments onto the stack, followed by a word-align,
a null pointer, the addresses to the strings, argv, argc, and a return addres.
The elements of argv[] will be placed in the correct order placing them
from max to argv[0], and if any order needs to be switched, simply direct
the address to its original string. 
Overflow can be prevented by ensuring that the stack size is always kept
in mind. Because the stack size remains constant, any attempt to overflow
can be checked with a comparator.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r() can be called from multiple threads concurrently, due to the 
fact that it does not store internal states between calls. Implementing
strtok_r() prevents race conditions and allows for simpler implementation
without the use of extra locks or semaphores.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

The string parsing is a high level function that does not need to be done
by the kernel. Minor resource allocation can be saved by having a low level
thread process the string manipulation instead of a kernel elevated thread.
Parsing in user space also allows an additional layer of protection against
possible attacks by only affecting the shell on the user level instead of 
the kernel level.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct list file_list
	Every thread needs to keep track of what files it has opened
int next_handle
	The next integer of the file descriptor
struct list child_list
	List of children 

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are unique to single processes. When a file is opened
by a process, a file descriptor is added to the thread of that process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

The process confirms that the source and destination address are valid
and acceptable, then copy the appropriate data.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

In the current implementation, if 4096 bytes of data are copied, pagedir_get_page() 
is called 4096 times. Similarly, if only 2 bytes of data are copied, 
the function is called twice. The current implementation can be improved
by allowing the function to handle more than single bytes at a time. 

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

A process returns -1 if it attempts to wait for a pid that it is already
waiting for. If the pid is already dead, the kernel returns the return status
of the dead process. The process waits until the pid returns and returns
its return value.  

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

Each address that is referenced must be checked for validity before 
attempting to read any kind of data. If there is any fault at any point,
there is an immediate sys_exit that keeps things tidy and hopefully
allows for minimal faults further down the line. 

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

A semaphore is used to ensure that the load is finished, and a global
flag is used to signal the loading result of exec. From there the system
knows whether loading succeeded or failed and can act appropriately.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

The parent holds a semaphore until its child is dead. The parent cleans up
any remaining information after the child dies, and cleans itself up
when the parent itself dies. 

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

It is the most logical design combining security and efficiency.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

By making the file descriptor owned on a process-by-process basis and 
not a global struct, it makes it simple to identify all files opened
by each file. However, to determine a list of all files would require
iterating through every single process and getting the list of all files
opened.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

The default mapping worked fine, there was no need to change it.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
